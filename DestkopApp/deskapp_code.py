# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'deskapp_design.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from keras.models import load_model
import cv2
import matplotlib.pyplot as plt
from skimage import filters
from skimage import feature
import numpy as np
import math
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox
from PyQt5.QtCore import QTimer

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(966, 698)
        MainWindow.setStyleSheet("background-color:rgb(252, 255, 244)")

        self.initComponens(MainWindow)
        self.initLogics()

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
    

    def initComponens(self, MainWindow):
        self.MainWindow = MainWindow
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.lbl_ct = QtWidgets.QLabel(self.centralwidget)
        self.lbl_ct.setGeometry(QtCore.QRect(100, 60, 261, 211))
        self.lbl_ct.setText("")
        self.lbl_ct.setScaledContents(True)
        self.lbl_ct.setObjectName("lbl_ct")
        self.lbl_mr = QtWidgets.QLabel(self.centralwidget)
        self.lbl_mr.setGeometry(QtCore.QRect(600, 60, 261, 211))
        self.lbl_mr.setText("")
        self.lbl_mr.setTextFormat(QtCore.Qt.AutoText)
        self.lbl_mr.setScaledContents(True)
        self.lbl_mr.setObjectName("lbl_mr")
        self.lbl_result = QtWidgets.QLabel(self.centralwidget)
        self.lbl_result.setGeometry(QtCore.QRect(320, 370, 261, 211))
        self.lbl_result.setText("")
        self.lbl_result.setScaledContents(True)
        self.lbl_result.setObjectName("lbl_result")
        self.lbl_ct_title = QtWidgets.QLabel(self.centralwidget)
        self.lbl_ct_title.setGeometry(QtCore.QRect(150, 30, 141, 21))
        self.lbl_ct_title.setAlignment(QtCore.Qt.AlignCenter)
        self.lbl_ct_title.setWordWrap(False)
        self.lbl_ct_title.setObjectName("lbl_ct_title")
        self.lbl_mri_title = QtWidgets.QLabel(self.centralwidget)
        self.lbl_mri_title.setGeometry(QtCore.QRect(660, 30, 141, 21))
        self.lbl_mri_title.setAlignment(QtCore.Qt.AlignCenter)
        self.lbl_mri_title.setObjectName("lbl_mri_title")
        self.lbl_result_title = QtWidgets.QLabel(self.centralwidget)
        self.lbl_result_title.setGeometry(QtCore.QRect(370, 340, 151, 21))
        self.lbl_result_title.setAlignment(QtCore.Qt.AlignCenter)
        self.lbl_result_title.setObjectName("lbl_result_title")
        self.progressBar = QtWidgets.QProgressBar(self.centralwidget)
        self.progressBar.setGeometry(QtCore.QRect(370, 310, 191, 23))
        self.progressBar.setProperty("value", 0)
        self.progressBar.setObjectName("progressBar")
        self.btn_uploadCt = QtWidgets.QPushButton(self.centralwidget)
        self.btn_uploadCt.setGeometry(QtCore.QRect(100, 600, 191, 51))
        self.btn_uploadCt.setStyleSheet("background-color: rgb(255, 255, 255);border-color: rgb(0, 0, 0);")
        self.btn_uploadCt.setObjectName("btn_uploadCt")
        self.btn_uploadMri = QtWidgets.QPushButton(self.centralwidget)
        self.btn_uploadMri.setGeometry(QtCore.QRect(290, 600, 191, 51))
        self.btn_uploadMri.setStyleSheet("background-color: rgb(255, 255, 255);border-color: rgb(0, 0, 0);")
        self.btn_uploadMri.setObjectName("btn_uploadMri")
        self.btn_regisration = QtWidgets.QPushButton(self.centralwidget)
        self.btn_regisration.setGeometry(QtCore.QRect(480, 600, 191, 51))
        self.btn_regisration.setStyleSheet("background-color: rgb(255, 255, 255);border-color: rgb(0, 0, 0);")
        self.btn_regisration.setObjectName("btn_regisration")
        self.btn_clear = QtWidgets.QPushButton(self.centralwidget)
        self.btn_clear.setGeometry(QtCore.QRect(670, 600, 191, 51))
        self.btn_clear.setStyleSheet("background-color: rgb(255, 255, 255);border-color: rgb(0, 0, 0);")
        self.btn_clear.setObjectName("btn_clear")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 966, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self._MR = []
        self._CT = []
        self.clearComponents()
        

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.lbl_ct_title.setText(_translate("MainWindow", "CT Image"))
        self.lbl_mri_title.setText(_translate("MainWindow", "MRI Image"))
        self.lbl_result_title.setText(_translate("MainWindow", "Result Image"))
        self.btn_uploadCt.setText(_translate("MainWindow", "Upload an Ct Image"))
        self.btn_uploadMri.setText(_translate("MainWindow", "Upload a Mri Image"))
        self.btn_regisration.setText(_translate("MainWindow", "Make Regisration!"))
        self.btn_clear.setText(_translate("MainWindow", "Clear"))
    
    def clearComponents(self):
        self.lbl_ct.setVisible(False)
        self.lbl_ct_title.setVisible(False)

        self.lbl_mr.setVisible(False)
        self.lbl_mri_title.setVisible(False)

        self.lbl_result.setVisible(False)
        self.lbl_result_title.setVisible(False)

        self.progressBar.setVisible(False)

        self.btn_uploadCt.setEnabled(True)
        self.btn_uploadMri.setEnabled(False)
        self.btn_regisration.setEnabled(False)
        self.btn_clear.setEnabled(False)
    
    def initLogics(self):
        self.btn_uploadCt.clicked.connect(self._uploadCtBtnClicked)
        self.btn_uploadMri.clicked.connect(self._uploadMriBtnClicked)
        self.btn_regisration.clicked.connect(self._makeRegisrationBtnClicked)
        self.btn_clear.clicked.connect(self.clearComponents)

    def _uploadCtBtnClicked(self):
        file_name = QtWidgets.QFileDialog.getOpenFileName(None, 'Open file',
                                            'c:\\', "Image files (*.jpg *.gif, *.jpeg)")        
        image_path = file_name[0]        
        ctPixMap = QtGui.QPixmap(image_path)
        #TODO: BUNU pixmap'e Ã§evirelim. @oguzt
        self._CT = self._uploadImageAsOpenCv(image_path)

        if not ctPixMap.isNull():
            self.lbl_ct_title.setVisible(True)
            self.lbl_ct.setVisible(True)
            self.lbl_ct.setPixmap(ctPixMap)
            self.btn_uploadMri.setEnabled(True)
            self.btn_clear.setEnabled(True)

    def _uploadMriBtnClicked(self):
        file_name = QtWidgets.QFileDialog.getOpenFileName(None, 'Open file',
                                            'c:\\', "Image files (*.jpg *.gif, *.jpeg)")        
        image_path = file_name[0]
        mriPixMap = QtGui.QPixmap(image_path)

        self._MR = self._uploadImageAsOpenCv(image_path)

        if not mriPixMap.isNull():
            self.lbl_mri_title.setVisible(True)
            self.lbl_mr.setVisible(True)
            self.lbl_mr.setPixmap(mriPixMap)
            self.btn_regisration.setEnabled(True)

    def _makeRegisrationBtnClicked(self):

        print(self._CT.shape)
        best=load_model("best_result.h5")
        
        
        test_x=self._CT
        test_x2=self._MR
        
        #Feature Extraction 1
        feature1_mr = filters.sobel(test_x2).reshape(-1,1)
        feature1_ct=filters.sobel(test_x).reshape(-1,1)
        
        #Feature Extraction 2
        feature2_mr = feature.canny(test_x2).reshape(-1,1)
        feature2_ct=feature.canny(test_x).reshape(-1,1)
        
        #Feature3 Low Pass Filter
        feature3_mr=self.low_pass(test_x2).reshape(-1,1)
        feature3_ct=self.low_pass(test_x).reshape(-1,1)
        
        test_x = test_x.reshape(-1,1)
        test_x2 = test_x2.reshape(-1,1)
        
        test=np.concatenate((test_x, test_x2,feature1_mr,feature1_ct,feature2_mr,feature2_ct,feature3_mr,feature3_ct), axis=1)
        
        y_pred=best.predict(test)
        
        size=int(math.sqrt(len(y_pred)))

        y_pred=y_pred.reshape(size,size)    
        
        plt.figure(figsize=(8,8))
        plt.imshow(y_pred,cmap="gray")
        plt.show()

        image = y_pred
        image = QtGui.QImage(image, image.shape[1],\
                            image.shape[0], image.shape[1] ,QtGui.QImage.Format_Grayscale8)
        pix = QtGui.QPixmap(image)

        self.progressBar.setVisible(True)
        self.lbl_result.setPixmap(pix)
        #self.lbl_result.setPixmap(QtGui.QPixmap("hiko_baba.jpg"))
        for i in range(1,101):
            self.progressBar.setValue(self.progressBar.value() + 1)        
        self.lbl_result_title.setVisible(True)
        self.lbl_result.setVisible(True)

        self._show_success_popup('Regisration Succesfull !!')

    def _show_success_popup(self, message):
        msg = QMessageBox()
        msg.setText(message)
        msg.setIcon(QMessageBox.Information)

        msg.exec_()
    
    def _uploadImageAsOpenCv(self,image_path):
        _image = cv2.imread(image_path)
        CT = cv2.cvtColor(_image, cv2.COLOR_BGR2GRAY)
        return CT
    def calculateDistance(self,point1,point2):
        return math.sqrt((point1[0]-point2[0])**2 + (point1[1]-point2[1])**2)

    def calculateIdealLowPassFilter(self,D0,imgShape):
        lowPassScpectrum = np.zeros(imgShape[:2])
        rows, cols = imgShape[:2]
        center = (rows/2,cols/2)
        for x in range(cols):
            for y in range(rows):
                if self.calculateDistance((y,x),center) < D0:
                    lowPassScpectrum[y,x] = 1
        return lowPassScpectrum
    
    def low_pass(self,img):   
      
        original = np.fft.fft2(img)
        center = np.fft.fftshift(original)
        LowPassCenter =  center * self.calculateIdealLowPassFilter(30,img.shape)
    
        LowPass = np.fft.ifftshift(LowPassCenter)
        inverse_LowPass = np.fft.ifft2(LowPass)   
    
        return np.abs(inverse_LowPass)

    


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
